//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;



/// <summary>
/// <para>
/// Regular expression: (Article+)
/// </para>
/// </summary>
public partial class Articles : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<ArticleType> ArticleField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Articles(XElement xe) { return XTypedServices.ToXTypedElement<Articles>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Articles() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Article", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Article+)
    /// </para>
    /// </summary>
    public Articles() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Article+)
    /// </para>
    /// </summary>
    public IList<ArticleType> Article {
        get {
            if ((this.ArticleField == null)) {
                this.ArticleField = new XTypedList<ArticleType>(this, LinqToXsdTypeManager.Instance, XName.Get("Article", ""));
            }
            return this.ArticleField;
        }
        set {
            if ((value == null)) {
                this.ArticleField = null;
            }
            else {
                if ((this.ArticleField == null)) {
                    this.ArticleField = XTypedList<ArticleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Article", ""));
                }
                else {
                    XTypedServices.SetList<ArticleType>(this.ArticleField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Articles", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Articles Load(string xmlFile) {
        return XTypedServices.Load<Articles>(xmlFile);
    }
    
    public static Articles Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Articles>(xmlFile);
    }
    
    public static Articles Parse(string xml) {
        return XTypedServices.Parse<Articles>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Articles>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Article", ""), typeof(ArticleType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

/// <summary>
/// <para>
/// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
/// </para>
/// </summary>
public partial class ArticleType : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator ArticleType(XElement xe) { return XTypedServices.ToXTypedElement<ArticleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static ArticleType() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
    /// </para>
    /// </summary>
    public ArticleType() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
    /// </para>
    /// </summary>
    public System.DateTime PublishedDateTime {
        get {
            XElement x = this.GetElement(XName.Get("PublishedDateTime", ""));
            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
        }
        set {
            this.SetElement(XName.Get("PublishedDateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
    /// </para>
    /// </summary>
    public System.DateTime RetrievedDateTime {
        get {
            XElement x = this.GetElement(XName.Get("RetrievedDateTime", ""));
            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
        }
        set {
            this.SetElement(XName.Get("RetrievedDateTime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
    /// </para>
    /// </summary>
    public System.Uri Source {
        get {
            XElement x = this.GetElement(XName.Get("Source", ""));
            return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
        }
        set {
            this.SetElement(XName.Get("Source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
    /// </para>
    /// </summary>
    public string Text {
        get {
            XElement x = this.GetElement(XName.Get("Text", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (PublishedDateTime, RetrievedDateTime, Source, Text, Title)
    /// </para>
    /// </summary>
    public string Title {
        get {
            XElement x = this.GetElement(XName.Get("Title", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("ArticleType", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<ArticleType>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("PublishedDateTime", ""), typeof(System.DateTime));
        localElementDictionary.Add(XName.Get("RetrievedDateTime", ""), typeof(System.DateTime));
        localElementDictionary.Add(XName.Get("Source", ""), typeof(System.Uri));
        localElementDictionary.Add(XName.Get("Text", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Title", ""), typeof(string));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildTypeDictionary();
        BuildElementDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return typeDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildTypeDictionary() {
        typeDictionary.Add(XName.Get("ArticleType", ""), typeof(global::ArticleType));
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("Articles", ""), typeof(global::Articles));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("Articles", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public Articles Articles {  get {return rootObject as Articles; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(Articles root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public Articles Articles {  get {return rootObject as Articles; } }
    
    private XRoot() {
    }
    
    public XRoot(Articles root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}
